name: check python extension
on:
  push:
    branches:
      - cffi

name: On ${{ matrix.os }} with (${{ matrix.compiler }}, python-${{ matrix.python-version }}, numpy-${{ matrix.numpy-version }})
runs-on: ${{ matrix.os }}
strategy:
  fail-fast: false
  matrix:
    os: ["ubuntu-16.04", "ubuntu-18.04", "ubuntu-20.04", "macos-latest"]
    compiler: [gcc-5, gcc-7, gcc-9, clang]
    python-version: ["3.6", "3.7", "3.8", "3.9"]

jobs:
  build:
    name: On ${{ matrix.os }} with (${{ matrix.compiler }}, python-${{ matrix.python-version }}, numpy-${{ matrix.numpy-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        compiler: [gcc-9, clang]
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        exclude:
          # Only run with 'clang' on OSX
          - os: "macos-latest"
            compiler: gcc-9

          # Don't use 'clang' on linux
          - os: "ubuntu-latest"
            compiler: clang
    env:
      CC: ${{ matrix.compiler }}
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          miniconda-version: 'latest'
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda create -q --yes -n test python=${{ matrix.python-version }} 
          conda activate test
          conda install -c conda-forge hdf5 gsl
          python -m pip install -r requirements.txt
      - name: Display PATH, compiler, python
        shell: bash -l {0}
        run: |
          conda activate test
          echo "PATH = " $PATH
          echo "COMPILER = " ${{ matrix.compiler }}
          echo "COMPILER location = " `which ${{ matrix.compiler }}`
          echo "COMPILER VERSION = " `${{ matrix.compiler }} --version`
          echo "PYTHON = " `which python`
          echo "(PYTHON) version = " `python -c "import sys; print(sys.version); "`
      - name: build libs
        shell: bash -l {0}
        run: make libs -r CC=${{ matrix.compiler }}
      - name: build and import python extension
        shell: bash -l {0}
        run: `python -c "from sage import build_sage; build_sage(); from _sage_cffi import ffi, lib"`
      
